Warning: Button and blinking led may block each other from working/registering under some circumstances/coding styles. Be sure to look up polling in loop vs registering event or using interrupts

Final Release Version Information
This assignment has been split into Beta & Final Release Versions to help everyone stay on track/make progress.

Create a video showing each of the items in the Program Description below working. 3-4 minutes max. upload video to UCI service like GoogleDrive/OneDrive/DropBox & share link in document.

Overview
In this lab, we will build upon our initial foundation by introducing a Raspberry Pi into our swarm. You will submit a document containing simple schematics and code as well as perform a live demonstration.

The ESP will be updated to connect to an analog light sensor (photoresistor from small package received with 3x ESP's). The Raspberry Pi will be configured with a button, four LEDs (Red, Yellow, Green, and White) from the sensor kit box you received during Orientation.

All four LEDs connected to the Pi and the on-board LED on the ESP's are initially OFF. There should be no communication between the Pi and the ESP initially. The ESP should not be collecting any information from the photoresistor until communication has been established from the Pi.

Program Description
When the button connected to the Pi is pressed:
The Pi should turn on the white LED and send a UDP message to the ESP to initiate communication
After receiving the first UDP message from the Pi, the ESP should
flash its on-board LED every 0.5 second
collect light sensor values every 1 second
once the ESP has 5 seconds worth of data, the ESP starts replying via UDP with the average value from the latest 5 seconds every 2 seconds
Whenever the Pi receives a reply containing light sensor data, the Pi will turn on one of the RGB LEDs if the value is LOW, two of the RGB LEDs if the value is MEDIUM, and all three RGB LEDs if the value is HIGH. Threshold values for LOW, MEDIUM, and HIGH are set by the developer (values may be asked to be adjusted by client later)
If the Pi hasn't received a message from the ESP after 10 seconds, the Pi flashes the white LED every 0.5 seconds to indicate an error condition (such as ESP is accidentally turned off) and does not try to reestablish a connection with the ESP. It will continue flashing until the button on the Pi is pressed again (step 2).
When the button on the Pi is pressed again:
The Pi should send a UDP message (different from the first message) to the ESP and turn off all RGBW LEDs
The ESP should now stop collecting/sending sensor readings and turn off its on-board LED
Both the Pi and the ESP should now be in their initial state (ready for step 1 again)

Documentation and Rubric Guidelines (Overall Beta + Final)
Documentation & commented code: 20 points
ESP WiFi setup and packet delivery: 20 points
Raspberry Pi WiFi setup and packet delivery: 20 points
ESP correctly reacts to received packets: 20 points
Raspberry Pi correctly reacts to received packets and error condition: 20 points
(optional) have all 3 ESPs communicate with Raspberry Pi (3 ESPs must run the same source code): +2 points
(more optional - only with 3 ESPs) if 1 of 3 ESPs disconnect, Raspberry Pi should query for that specific ESP: +3 points

Document/Submission Guidelines:
Submit 1 file (pdf format) with the following sections:
Overview - Schematic and Communication Protocol
Show the overall schematic/wiring diagram of your system containing the Raspberry Pi, ESP, and all components used in this lab. Be sure to properly label all connections/pins used.
Describe/show the protocol/messages being sent from the Raspberry Pi and ESP
Part 1 - Raspberry Pi WiFi setup and packet delivery
Show a flow-chart of the Raspberry Pi in its initial state, sensor reading state, and any other relevant states in your design. Be sure to also show the input/communication to/from the Pi
Explain what is happening at each state (1-3 sentences max)
Describe the main functionality of your Raspberry Pi code
Function(s): Input, Process, Output
Part 2 - ESP WiFi setup and packet delivery
Show a flow-chart of the ESP in its initial state, data-collection/sensor sending state, and any other relevant states in your design. Be sure to also show the input/communication to/from the ESP
Explain what is happening at each state (1-3 sentences max)
Describe the main functionality of your ESP code
Function(s): Input, Process, Output
Submit your final code files
Raspberry Pi source code
ESP source code
